#!/bin/sh -f
# name of the job
#PBS -N producer-consumer_algCASEALG_CASETHREADS_threads
# use the complete path to the standard output files
#PBS -o /nas_home/andersg/EXCESS-software/data-structures-framework/PBS/producerconsumer_job/$PBS_JOBID.out
#PBS -e /nas_home/andersg/EXCESS-software/data-structures-framework/PBS/producerconsumer_job/$PBS_JOBID.err 
# set walltime: max. 00:10:00 for the queue 'batch' and max. 01:00:00 for the queue 'night'
#PBS -l walltime=01:00:00
# set the queue: batch or night
#PBS -q night
# set the number of nodes 
#PBS -l nodes=1:node01:ppn=20
# use submission enviroment - please don't change
#pbs -V
#start job from the directory it was submitted
#cd $PBS_WORKDIR
date
echo "PBS_O_HOST=$PBS_O_HOST  # The name of the host upon which the qsub command is running."
echo "PBS_O_WORKDIR=$PBS_O_WORKDIR  # The absolute path of the current working directory of the qsub command."
echo "PBS_JOBID=$PBS_JOBID  # The job identifier assigned to the job by the batch system."
echo "PBS_JOBNAME=$PBS_JOBNAME # The job name supplied by the user."

#load used modules
. $HOME/.modules

# load module power/mf_shared
# and get the new dbkey from the monitoring framework
#module load power/mf_shared/20
#DBKEY_STRING=$( get_unique_dbkey -d ${HOME}/.mf/dbkey/ -f ${PBS_JOBID} )
#DBKEY=$( echo ${DBKEY_STRING}| awk -v N=$N '{print $2}' )
#echo "Monitoring framework DBKEY = $DBKEY"

# Job environment
export JOBDIR=/nas_home/andersg/EXCESS-software/data-structures-framework/PBS/producerconsumer_job/
export LOGDIR=/nas_home/andersg/results/producerconsumer_`date +%Y-%m-%d_%H.%M`

mkdir $LOGDIR
cd $LOGDIR

###############################################################################
echo "job is starting"

export LOGBASE=producerconsumer_result_`date +%Y-%m-%d_%H.%M`
export RMAINLOG=$LOGDIR/$LOGBASE-out.txt

echo "PBS job $PBS_JOBID named $PBS_JOBNAME is starting..." >> $RMAINLOG
echo "Monitoring framework key $DBKEY" >> $RMAINLOG

PROGRAM=$HOME/EXCESS-software/data-structures-framework/testbench

FREQUENCIES="3"
#FREQUENCIES="3.4Ghz 2.3Ghz 1.2Ghz"
#THREADS="2 4 6 8 10 12 14 16"
THREADS="CASETHREADS"
# The total case duration is 2 + $KILLDURATION + 3 seconds.
# $KILLDURATION must be sufficiently larger than $PRGDURATION or
# the case may be terminated prematurely.
# $SAMPLEDURATION should be less than the total case duration.
PRGDURATION="10"
KILLDURATION="15"
SAMPLEDURATION="15"
#   0. Queue NOBLE Lock-Free DB          1. Queue NOBLE Lock-Free DU
#   2. Queue NOBLE Lock-Free SB          3. Queue NOBLE Lock-Free BB
#   4. Queue NOBLE Lock-Free BASKET      5. Queue NOBLE Lock-Free ELIM
#   6. Queue NOBLE Lock-Based            7. Queue TBB concurrent_queue
#   8. Queue M&S Two-lock queue          9. Stack NOBLE Lock-Free B
#  10. Stack NOBLE Lock-Free ELIM       11. Bag NOBLE Lock-Free BB
#  12. Pool NOBLE Lock-Free EDTREE
#ALGORITHMS="0 1 2 3 4 5 6 7 8 9 10 11 12"
ALGORITHMS="CASEALG"
#ALGORITHMS="3"
# Patterns:
#   0. N threads randomly selecting between Produce/Consume
#   1. N/2 Producer - N/2 Consumer threads (default)
#   2.   1 Producer - N-1 Consumer threads
#   3. N-1 Producer -   1 Consumer threads
#   4.   0 Producer -   N Consumer threads (use phased mode for non-empty)
#   5.   N Producer -   0 Consumer threads
#   6. Enqueuers are those where do_enq = myId % 2 is true.
#   ...
#  24. Enqueuers are those where do_enq = myId % 20 is true.
#  25. Enqueuers are those where do_enq = !(myId % 2) is true.
#   ...
#  43. Enqueuers are those where do_enq = !(myId % 20) is true.
PATTERNS="CASEPAT"
# Producer parallel work: 0 -
PRODPWS="1 2 3 4 5 7 10 20 50 150 500 1000"
# Consumer parallel work: 0 -
CONSPWS="1 2 3 4 5 7 10 20 50 150 500 1000"

# Inserts per phase to restrict collection size. Set to 0 to disable.
PHASEINSERTS="100000"

# Pinning: -1. NONE. (default);        0.  FILL PU per socket;
#           1.  FILL CORE per socket;  2.  JUMP socket.
PINNING="1"

export RAPLSAMPLE="$HOME/EXCESS-software/state-record-tool/read-rapl-likwid -s 10 -d $SAMPLEDURATION"
export TEMPSAMPLE="$HOME/EXCESS-software/state-record-tool/read-coretemp -d $SAMPLEDURATION"

for Frequency in $FREQUENCIES; do
    # Set the CPU frequency.
    likwid-setFrequencies -f $Frequency >> $RMAINLOG

    sleep 5s
    echo Verifying CPU frequency setting. >> $RMAINLOG
    likwid-setFrequencies -p >> $RMAINLOG
    sleep 5s

    for Threads in $THREADS; do
        for Pattern in $PATTERNS; do
            for ProdPW in $PRODPWS; do
                for ConsPW in $CONSPWS; do
                    for Alg in $ALGORITHMS; do
                        Case=a$Alg-p$Pattern-ppw$ProdPW-cpw$ConsPW-f$Frequency-t$Threads
                        echo "Starting $LOGBASE-$Case ..."

                        RRAPLLOG=$LOGDIR/$LOGBASE-RAPL-$Case.csv
                        RTEMPLOG=$LOGDIR/$LOGBASE-TEMP-$Case.csv
                        RCACHELOG=$LOGDIR/$LOGBASE-CACHE-$Case.txt
                        ROUTLOG=$LOGDIR/$LOGBASE-OUT-$Case.txt

                        # Start sampling
                        ($RAPLSAMPLE -o $RRAPLLOG)&
                        #($TEMPSAMPLE -o $RTEMPLOG)&
                        echo >> $RMAINLOG; echo >> $RMAINLOG;
                        date >> $RMAINLOG; echo $Case >> $RMAINLOG

                        echo "$PROGRAM -e 0 -d $PRGDURATION -p $PINNING -t $Threads -i $Alg -s 0 $Pattern -s 1 $ProdPW -s 2 $ConsPW -s 3 $PHASEINSERTS" >> $RMAINLOG
                        sleep 2s

                        $PROGRAM -e 0 -d $PRGDURATION -p $PINNING -t $Threads -i $Alg -s 0 $Pattern -s 1 $ProdPW -s 2 $ConsPW -s 3 $PHASEINSERTS 2>> $RMAINLOG > $ROUTLOG & (sleep $KILLDURATION; killall $PROGRAM &>> $RMAINLOG)

                        echo "... done"
                        sleep 3s
                        echo " "
                    done
                done
            done
        done
    done
done

sleep 30s

###############################################################################
echo "job is done"
