// Simple test and test-and-set spinlock based on GCC intrinsic with
// acquire/release memory semantics.
// Copyright (C) 2015  Anders Gidenstam
//
// This library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

#ifndef __SPINLOCK_TTAS_ACQUIRERELEASE_H
#define __SPINLOCK_TTAS_ACQUIRERELEASE_H

#include <EXCESS/spinlock>

namespace excess {
namespace locks {

// Test and test-and-set based on GCC acquire/release intrinsics
// without back-off.
// Locking enforces an acquire (post-read) memory barrier, unlocking a
// release (pre-read,write) memory barrier.
class spinlock_TTAS_AcquireRelease
  : spinlock {
private:
  volatile int flag;
  
public:
  spinlock_TTAS_AcquireRelease()
  {
    flag = 0;
  }

  void lock()
  {
    for (;;) {
      if (!flag) {
        // Lock and enforce an acquire memory barrier.
        // The previous value of flag is returned.
        if (!__sync_lock_test_and_set(&flag, 1)) {
          return;
        }
      }
    }
  }

  void unlock()
  {
    // Unlock with a release memory barrier.
    __sync_lock_release(&flag);
  }
};

}}

#endif
