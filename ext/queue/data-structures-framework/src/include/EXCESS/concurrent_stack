// EXCESS concurrent_stack adapters.
// Copyright (C) 2015  Anders Gidenstam
//
// This library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

#ifndef __CONCURRENT_STACK_H
#define __CONCURRENT_STACK_H

namespace excess {

template < typename T >
class concurrent_stack
{
public:
  class handle // Each instance MUST be acquired and used in a single thread.
  {
  public:
    virtual ~handle() {}

    virtual void push(T* item)     = 0;
    virtual bool try_pop(T*& item) = 0;
    virtual bool empty()           = 0;

    //virtual int  size(); // NOTE: Often not atomic or even thread-safe.
  protected:
    handle() {}
  private:
    // Disallow copying and assignment.
    handle(const handle&);
    void operator=(const handle&);
  };

  virtual ~concurrent_stack() {}
  virtual handle* get_handle() = 0;
  // NOTE: Each handle MUST be acquired and used in a single thread and
  //       the handle MUST be deleted when no longer needed.
protected:
  concurrent_stack() {}
private:
  // Disallow copying and assignment.
  concurrent_stack(const concurrent_stack&);
  void operator=(const concurrent_stack&);
};

}

// NOBLE
#ifdef USE_NOBLE
#include "impl/concurrent_stack_NBLStack"
#endif

#endif
