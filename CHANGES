# RELEASE NOTES

## 16.6 (13/06/2016)

### Features
- New MF APIs; added data statistics retrieving with multiple metrics
- Added plugin units send and create during initialization; Make binaries for each plugin units collection and publish
- Enable to register experiments with given experiment ID
- Generate static libraries like, libmf.a and libpublisher.a during building
- Bulk message sending with BULK_SIZE being 8
- Improved metrics sending with multiple sending threads
- Integrated with EXCESS Concurrent Queue; source kept in ext/queue
- Bug fix: send the rest of metrics before threads end


## 16.2 (26/02/2016)

### Features
- New plugins: sensors, movidius
- Merged agent sources across EU projects into a unified version of the agent
- Updated command line parameters: user, task, id, config, api version
- Agent uses API version v1 per default in order to communicate with backend server
- New version schema: year + month

### Fixes
- Fixed compiling issues with mf_api tests


## 1.0.1 (14/01/2016)

### Fixes
- Issue where already collected metric data is no longer sent to the database after the monitoring agent is stopped.


## 1.0.0 (12/18/2015)

### Features
- Implementation of the /proc/meminfo plug-in anew. The plug-in now supports all available events produced by /proc/meminfo
- Monitoring API includes are now installed in the same directory while installing the agent
- Refactoring of PAPI, RAPL, and vmstat plug-ins results in increased performance.
- Added new Nvidia plug-in provided by Chalmers University of Technology, Sweden. Thanks to Anders Gidenstam!

### Fixes
- Experiment was not registered at server when a user-defined execution ID was provided.
- Agents were not correctly deployed on multiple nodes (cf. updated start_mf.sh script).
- Source directory was not cleaned up after installing dependencies.

### Remarks
- Removed Likwid plugin due to its GPLv3 license model.
- Introduced new project structure. Plugins are now clearly separated between C-based and Shell-based ones.
- Added licensing information, and updated Doxygen documentation



## 0.1.6 (05/11/2015)

### Features
- Both plug-in types (Shell & C) are now available for iostat
- Updated scripts (e.g. start_mf.sh) to read mf_config for iostat
- RAPL plug-in reads selected metrics from mf_config.ini



## 0.1.5 (03/19/2015)

### Features
- Added iostat plug-in


## 0.1.4 (02/25/2015)

### Features
- Added scripts for performing experiments specific to the CRESTA CEL benchmark.
- Enabled user-defined configuration files (cf. remarks).
- Removed redundant files from the project.

### Remarks
If in the user directory <pre>$HOME/.mf</pre> a INI file exists having the PBS JobID as filename, then, for this particular job, the configuration file from the user library is used instead of the default configuration file located on the EXCESS cluster at <pre>/opt/mf/<version>/mf_config.ini</pre>.



## 0.1.3 (02/17/2015)

### Features
- Introduced first draft of a user library for code instrumentation and analysis
- Refined project structure.
- Enabled setting all parameters via the configuration file (mf_config.ini)

### Remarks
None.



## 0.1.2 (12/08/2014)

### Features
- PAPI support for monitoring all processes running on CPUs (third-person).
- Fixed parser implementation.
- Parser reads values for the PAPI plugin.
- Fixed numSockets error caused by the Likwid plugin.

### Remarks
None.



## 0.1 (12/01/2014)

### Features
- Deployed on EXCESS cluster at HLRS using TORQUE as a resource manager.
- Framework runs automatically in the background during the execution of jobs if requested.
- Refinement of the project structure (bin, lib, contrib, docs, tests).
- Redefined and unified the structure of the configuration file (mf_config.ini).
- Moved functionality of the configuration parser and database communication into sub-modules (contrib/parser, contrib/publisher) in order to prepare usage as a library.
- Introduced test-driven development using CuTest.

### Remarks
You can switch on the monitoring on the EXCESS cluster on a per-node basis by creating the file <pre>start_monitoring</pre> within the directory <pre>$HOME/.mf/service/<node></pre>.

